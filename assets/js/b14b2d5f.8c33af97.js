"use strict";(self.webpackChunkwoo_docs_migration=self.webpackChunkwoo_docs_migration||[]).push([[7569],{8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(6540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},9788:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started/extension-development/data-storage","title":"Data storage primer","description":"When developing for WordPress and WooCommerce, it\'s important to consider the nature and permanence of your data. This will help you decide the best way to store it. Here\'s a quick primer:","source":"@site/../getting-started/extension-development/data-storage.md","sourceDirName":"getting-started/extension-development","slug":"/getting-started/extension-development/data-storage","permalink":"/docs-playground/docs/getting-started/extension-development/data-storage","draft":false,"unlisted":false,"editUrl":"https://github.com/woocommerce/woocommerce/tree/trunk/docs/../getting-started/extension-development/data-storage.md","tags":[{"inline":true,"label":"reference","permalink":"/docs-playground/docs/tags/reference"}],"version":"current","frontMatter":{"post_title":"Data storage primer","sidebar_label":"Data storage","tags":["reference"]},"sidebar":"tutorialSidebar","previous":{"title":"How to create custom product tours","permalink":"/docs-playground/docs/getting-started/extension-development/creating-custom-product-tours"},"next":{"title":"Plugin header comments","permalink":"/docs-playground/docs/getting-started/extension-development/example-header-plugin-comment"}}');var a=s(4848),o=s(8453);const r={post_title:"Data storage primer",sidebar_label:"Data storage",tags:["reference"]},i="Data storage primer",d={},l=[{value:"Transients",id:"transients",level:2},{value:"WP Cache",id:"wp-cache",level:2},{value:"wp_options Table",id:"wp_options-table",level:2},{value:"Post Types",id:"post-types",level:2},{value:"Taxonomies",id:"taxonomies",level:2},{value:"Logging",id:"logging",level:2}];function p(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"data-storage-primer",children:"Data storage primer"})}),"\n",(0,a.jsx)(t.p,{children:"When developing for WordPress and WooCommerce, it's important to consider the nature and permanence of your data. This will help you decide the best way to store it. Here's a quick primer:"}),"\n",(0,a.jsx)(t.h2,{id:"transients",children:"Transients"}),"\n",(0,a.jsxs)(t.p,{children:["If the data may not always be present (i.e., it expires), use a ",(0,a.jsx)(t.a,{href:"https://developer.wordpress.org/apis/handbook/transients/",children:"transient"}),". Transients are a simple and standardized way of storing cached data in the database temporarily by giving it a custom name and a timeframe after which it will expire and be deleted."]}),"\n",(0,a.jsx)(t.h2,{id:"wp-cache",children:"WP Cache"}),"\n",(0,a.jsxs)(t.p,{children:["If the data is persistent but not always present, consider using the ",(0,a.jsx)(t.a,{href:"https://developer.wordpress.org/reference/classes/wp_object_cache/",children:"WP Cache"}),". The WP Cache functions allow you to cache data that is computationally expensive to regenerate, such as complex query results."]}),"\n",(0,a.jsx)(t.h2,{id:"wp_options-table",children:"wp_options Table"}),"\n",(0,a.jsxs)(t.p,{children:["If the data is persistent and always present, consider the ",(0,a.jsx)(t.a,{href:"https://developer.wordpress.org/apis/handbook/options/",children:"wp_options table"}),". The Options API is a simple and standardized way of storing data in the wp_options table in the WordPress database."]}),"\n",(0,a.jsx)(t.h2,{id:"post-types",children:"Post Types"}),"\n",(0,a.jsxs)(t.p,{children:["If the data type is an entity with n units, consider a ",(0,a.jsx)(t.a,{href:"https://developer.wordpress.org/post_type/",children:"post type"}),'. Post types are "types" of content that are stored in the same way, but are easy to distinguish in the code and UI.']}),"\n",(0,a.jsx)(t.h2,{id:"taxonomies",children:"Taxonomies"}),"\n",(0,a.jsxs)(t.p,{children:["If the data is a means of sorting/categorizing an entity, consider a ",(0,a.jsx)(t.a,{href:"https://developer.wordpress.org/taxonomy/",children:"taxonomy"}),". Taxonomies are a way of grouping things together."]}),"\n",(0,a.jsx)(t.h2,{id:"logging",children:"Logging"}),"\n",(0,a.jsxs)(t.p,{children:["Logs should be written to a file using the ",(0,a.jsx)(t.a,{href:"https://woocommerce.com/wc-apidocs/class-WC_Logger.html",children:"WC_Logger"})," class. This is a simple and standardized way of recording events and errors for debugging purposes."]}),"\n",(0,a.jsx)(t.p,{children:"Remember, the best method of data storage depends on the nature of the data and how it will be used in your application."})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);